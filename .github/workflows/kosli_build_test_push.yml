name: Build, test, push to Dockerhub

on:
  workflow_call:
    secrets:
      DOCKER_PASS:
        required: true
      DOCKER_USER:
        required: true
      KOSLI_API_TOKEN:
        required: true
    inputs:
      AWS_ACCOUNT_ID:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      BUILD_COMMAND:
        required: true
        type: string
      ecr_registry:
        required: true
        type: string
      service_name:
        required: true
        type: string
      gh_actions_iam_role_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string

jobs:
  build:
    name: Build test publish
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: write
    steps:

      - name: setup kosli
        uses: kosli-dev/setup-cli-action@v1
        with:
          version:
            0.1.31

      - name: setup Snyk
        uses: snyk/actions/setup@master

      - uses: actions/checkout@v3
        with:
          # Get full history for Kosli commit-interval harvesting
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ inputs.AWS_REGION }}
          role-duration-seconds: 2400
          role-session-name: ${{ github.event.repository.name }}
          role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/${{ inputs.gh_actions_iam_role_name }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build test publish
        env:
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          KOSLI_HOST_STAGING: https://staging.app.kosli.com
          KOSLI_HOST_PRODUCTION: https://app.kosli.com
          KOSLI_OWNER: cyber-dojo
          KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}

        run: |
          echo "${DOCKER_PASS}" | docker login --username "${DOCKER_USER}" --password-stdin
          ./${{ inputs.BUILD_COMMAND }}
          docker tag cyberdojo/${{ inputs.service_name }}:${{ inputs.image_tag }} ${{ inputs.ecr_registry }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
          docker push ${{ inputs.ecr_registry }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
          docker logout
