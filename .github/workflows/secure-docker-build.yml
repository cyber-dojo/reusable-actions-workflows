name: Secure docker build

on:
  workflow_call:
    outputs:
      digest:
        description: The SHA256 image digest
        value: ${{ jobs.secure-build.outputs.digest }}
    inputs:
      # inputs for actions/checkout@v4
      CHECKOUT_REPOSITORY:
        required: true
        type: string
      CHECKOUT_REF:
        required: true
        type: string
      CHECKOUT_FETCH_DEPTH:
        required: true
        type: string

      # inputs for docker/build-push-action@v6
      IMAGE_NAME:            
        required: true
        type: string
      IMAGE_TAG:            
        required: true
        type: string
      IMAGE_BUILD_ARGS:      # eg
        required: true
        type: string

      # inputs for [kosli attest artifact]
      KOSLI_CLI_VERSION:
        required: false
        type: string
        default: ${{ vars.KOSLI_CLI_VERSION }}
      KOSLI_DEBUG:
        required: false
        type: string
        default: ${{ vars.KOSLI_DEBUG }}
      KOSLI_DRY_RUN:
        required: false
        type: string
        default: ${{ vars.KOSLI_DRY_RUN }}
      KOSLI_HOST:
        required: false
        type: string
        default: ${{ vars.KOSLI_HOST }}
      KOSLI_ORG:
        required: false
        type: string
        default: ${{ vars.KOSLI_ORG }}
      KOSLI_FLOW:
        required: true
        type: string
      KOSLI_TRAIL:
        required: true
        type: string
      KOSLI_REFERENCE_NAME:  # eg saver
        required: true
        type: string

    secrets:
      KOSLI_API_TOKEN:
        required: true


env:
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_DEBUG:     ${{ inputs.KOSLI_DEBUG }}          # true/false
  KOSLI_DRY_RUN:   ${{ inputs.KOSLI_DRY_RUN }}        # true/false
  KOSLI_HOST:      ${{ inputs.KOSLI_HOST }}           # https://app.kosli.com
  KOSLI_ORG:       ${{ inputs.KOSLI_ORG }}            # cyber-dojo
  KOSLI_FLOW:      ${{ inputs.KOSLI_FLOW }}           # saver-ci
  KOSLI_TRAIL:     ${{ inputs.KOSLI_TRAIL }}

  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION:     ${{ vars.AWS_REGION }}

jobs:

  secure-build:
    needs: []
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.sanitize-digest.outputs.digest }}
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/gh_actions_services
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 2400
          role-session-name: ${{ github.event.repository.name }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.CHECKOUT_REPOSITORY }}
          ref: ${{ inputs.CHECKOUT_REF }}
          fetch-depth: ${{ inputs.CHECKOUT_FETCH_DEPTH }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to Amazon ECR
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          no-cache: true
          push: true
          tags: ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}
          build-args: ${{ inputs.IMAGE_BUILD_ARGS }}
          provenance: mode=max
          sbom: true

      - name: Sanitize digest
        id: sanitize-digest
        run: |
          DIGEST=$(echo ${{ steps.docker_build.outputs.digest }} | sed 's/^sha256://')
          echo "DIGEST=${DIGEST}" >> ${GITHUB_ENV}
          echo "digest=${DIGEST}" >> ${GITHUB_OUTPUT}


      # - name: Get build metadata
      #   run: |
      #     docker buildx imagetools inspect ${{ inputs.IMAGE_TAGS }}@${{ steps.docker_build.outputs.digest }} \
      #       --format "{{ json .Provenance.SLSA }}"

      - name: Setup Kosli CLI
        if: ${{ success() || failure() }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ inputs.KOSLI_CLI_VERSION }}

      - name: Attest Build Provenance
        id: artifact-gh-attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ inputs.IMAGE_NAME }}
          subject-digest: sha256:${{ env.DIGEST }}
          push-to-registry: true

      - name: Attest artifact to Kosli
        if: ${{ success() || failure() }}
        run:
          kosli attest artifact ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}
            --fingerprint=${{ env.DIGEST }}
            --name=${{ inputs.KOSLI_REFERENCE_NAME }}

      - name: Make artifact GH sigstore attestation index available to next steps
        run: |
          TRANSPARENCY_LOG_INDEX=$(jq '.verificationMaterial.tlogEntries[0].logIndex' ${{ steps.artifact-gh-attest.outputs.bundle-path }})
          echo "ARTIFACT_TLOG_INDEX=$TRANSPARENCY_LOG_INDEX" >> ${GITHUB_ENV}

      - name: Attest GitHub attestation to Kosli
        if: ${{ success() || failure() }}
        run:
          kosli attest generic --name github-build-attestation
            --fingerprint ${{ env.DIGEST }}
            --external-url github-attestation=${{ steps.artifact-gh-attest.outputs.attestation-url }}
            --external-url sigstore=https://search.sigstore.dev/?logIndex=${{ env.ARTIFACT_TLOG_INDEX }}

  # provenance:
  #   needs: [secure-build]
  #   permissions:
  #     actions: read # for detecting the Github Actions environment.
  #     id-token: write # for creating OIDC tokens for signing.
  #     packages: write # for uploading attestations.
  #   if: always()
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
  #   with:
  #     # image: ${{ inputs.IMAGE_TAGS }}
  #     image: 244531986313.dkr.ecr.eu-central-1.amazonaws.com/saver
  #     digest: ${{ needs.secure-build.outputs.digest }}
