# Intended to replace secure-image-load.yml so calling workflow does not need to pull image from ECR

name: Secure docker build

on:
  workflow_call:
    outputs:
      digest:
        description: The SHA256 image digest
        value: ${{ jobs.secure-build.outputs.digest }}
      cache_path:
        description: Docker image cache path
        value: ${{ jobs.secure-build.outputs.cache_path }}
      cache_key:
        description: Docker image cache key
        value: ${{ jobs.secure-build.outputs.cache_key }}

    inputs:
      # inputs for actions/checkout@v4
      CHECKOUT_REPOSITORY:
        required: true
        type: string
      CHECKOUT_REF:
        required: true
        type: string
      CHECKOUT_FETCH_DEPTH:
        required: true
        type: string

      # inputs for docker/build-push-action@v6
      IMAGE_NAME:            
        required: true
        type: string
      IMAGE_TAG:            
        required: true
        type: string
      IMAGE_BUILD_ARGS:
        required: false
        type: string

      # inputs for [kosli attest artifact]
      ATTEST_TO_KOSLI:
        required: false
        type: boolean
        default: true
      KOSLI_CLI_VERSION:
        required: false
        type: string
        default: ${{ vars.KOSLI_CLI_VERSION }}
      KOSLI_DEBUG:
        required: false
        type: string
        default: ${{ vars.KOSLI_DEBUG }}
      KOSLI_DRY_RUN:
        required: false
        type: string
        default: ${{ vars.KOSLI_DRY_RUN }}
      KOSLI_HOST:
        required: false
        type: string
        default: ${{ vars.KOSLI_HOST }}
      KOSLI_ORG:
        required: false
        type: string
        default: ${{ vars.KOSLI_ORG }}
      KOSLI_FLOW:
        required: true
        type: string
      KOSLI_TRAIL:
        required: true
        type: string
      KOSLI_REFERENCE_NAME:  # eg saver
        required: true
        type: string

    secrets:
      KOSLI_API_TOKEN:
        required: true


env:
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_DEBUG:     ${{ inputs.KOSLI_DEBUG }}          # true/false
  KOSLI_DRY_RUN:   ${{ inputs.KOSLI_DRY_RUN }}        # true/false
  KOSLI_HOST:      ${{ inputs.KOSLI_HOST }}           # https://app.kosli.com
  KOSLI_ORG:       ${{ inputs.KOSLI_ORG }}            # cyber-dojo
  KOSLI_FLOW:      ${{ inputs.KOSLI_FLOW }}           # saver-ci
  KOSLI_TRAIL:     ${{ inputs.KOSLI_TRAIL }}

  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION:     ${{ vars.AWS_REGION }}

jobs:

  secure-build:
    needs: []
    runs-on: ubuntu-latest
    outputs:
      digest:     ${{ steps.set.outputs.digest }}
      cache_path: ${{ steps.set.outputs.cache_path }}
      cache_key:  ${{ steps.set.outputs.cache_key }}
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/gh_actions_services
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 2400
          role-session-name: ${{ github.event.repository.name }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.CHECKOUT_REPOSITORY }}
          ref: ${{ inputs.CHECKOUT_REF }}
          fetch-depth: ${{ inputs.CHECKOUT_FETCH_DEPTH }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to Amazon ECR
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          no-cache: true
          push: true
          tags: ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}
          build-args: ${{ inputs.IMAGE_BUILD_ARGS }}
          provenance: mode=max
          sbom: true

      - name: Set outputs
        id: set
        run: |
          DIGEST=$(echo ${{ steps.docker_build.outputs.digest }} | sed 's/^sha256://')
          echo "DIGEST=${DIGEST}" >> ${GITHUB_ENV}
          echo "digest=${DIGEST}" >> ${GITHUB_OUTPUT}
          echo "CACHE_PATH=${DIGEST}.tar" >> ${GITHUB_ENV}
          echo "cache_path=${DIGEST}.tar" >> ${GITHUB_OUTPUT}
          echo "CACHE_KEY=${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}" >> ${GITHUB_ENV} 
          echo "cache_key=${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}" >> ${GITHUB_OUTPUT} 

      - name: Get build metadata
        run:
          docker buildx imagetools inspect ${{ inputs.IMAGE_NAME }}@${{ env.DIGEST }}
            --format "{{ json .Provenance.SLSA }}" > provenance.json

      - name: Get SBOM file
        run:
          docker buildx imagetools inspect ${{ inputs.IMAGE_NAME }}@${{ env.DIGEST }}
            --format "{{ json .SBOM.SPDX }}" > sbom.spdx.json

      - name: Attest Build Provenance
        id: artifact-gh-attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ inputs.IMAGE_NAME }}
          subject-digest: sha256:${{ env.DIGEST }}
          push-to-registry: true

      - name: Make artifact GH sigstore attestation index available to next steps
        run: |
          TRANSPARENCY_LOG_INDEX=$(jq '.verificationMaterial.tlogEntries[0].logIndex' ${{ steps.artifact-gh-attest.outputs.bundle-path }})
          echo "ARTIFACT_TLOG_INDEX=${TRANSPARENCY_LOG_INDEX}" >> ${GITHUB_ENV}
      
      - name: Attest SBOM to Github
        id: sbom-gh-attest
        uses: actions/attest-sbom@v2
        with:
          sbom-path: 'sbom.spdx.json'
          subject-name: ${{ inputs.IMAGE_NAME }}
          subject-digest: sha256:${{ env.DIGEST }}

      - name: Make sbom GH sigstore attestation index available to next steps
        run: |
          TRANSPARENCY_LOG_INDEX=$(jq '.verificationMaterial.tlogEntries[0].logIndex' ${{ steps.sbom-gh-attest.outputs.bundle-path }})
          echo "SBOM_TLOG_INDEX=${TRANSPARENCY_LOG_INDEX}" >> ${GITHUB_ENV}

      - name: Echo workflow details
        run: |
          echo "Workflow     => ${{ github.workflow }}"
          echo "Workflow ref => ${{ github.workflow_ref }}"
          echo "Workflow sha => ${{ github.workflow_sha }}"

      - name: Setup Kosli CLI
        if: ${{ success() || failure() }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ inputs.KOSLI_CLI_VERSION }}

      - name: Attest artifact to Kosli
        if: ${{ inputs.ATTEST_TO_KOSLI == true && (success() || failure()) }}
        run:
          kosli attest artifact ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}
            --fingerprint=${{ env.DIGEST }}
            --name=${{ inputs.KOSLI_REFERENCE_NAME }}

      - name: Attest GitHub attestation to Kosli
        if: ${{ inputs.ATTEST_TO_KOSLI == true && (success() || failure()) }}
        run:
          kosli attest generic 
            --name provenance-attestation
            --fingerprint ${{ env.DIGEST }}
            --attachments provenance.json
            --external-url github-attestation=${{ steps.artifact-gh-attest.outputs.attestation-url }}
            --external-url github-sigstore=https://search.sigstore.dev/?logIndex=${{ env.ARTIFACT_TLOG_INDEX }}

      - name: Attest SBOM to Kosli
        if: ${{ inputs.ATTEST_TO_KOSLI == true && (success() || failure()) }}
        run:
          kosli attest generic 
            --name sbom
            --fingerprint ${{ env.DIGEST }}
            --attachments sbom.spdx.json
            --external-url github-attestation=${{ steps.sbom-gh-attest.outputs.attestation-url }}
            --external-url github-sigstore=https://search.sigstore.dev/?logIndex=${{ env.SBOM_TLOG_INDEX }}

      - name: Pull docker image
        run: |
          docker pull ${{ inputs.IMAGE_NAME }}@sha256:${{ env.DIGEST }}
          docker tag ${{ inputs.IMAGE_NAME }}@sha256:${{ env.DIGEST }} ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}

      - name: Save Docker image
        run:
          docker image save ${{ env.CACHE_KEY }} --output ${{ env.CACHE_PATH }}

      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          key:  ${{ env.CACHE_KEY }}
          path: ${{ env.CACHE_PATH }}
